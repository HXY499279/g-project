[{"D:\\code\\g-project\\src\\index.js":"1","D:\\code\\g-project\\src\\components\\Content\\目标转化事件\\index.js":"2","D:\\code\\g-project\\src\\components\\Content\\查看方式\\index.js":"3","D:\\code\\g-project\\src\\components\\Content\\待归因事件\\index.js":"4","D:\\code\\g-project\\src\\components\\Content\\过程事件\\index.js":"5","D:\\code\\g-project\\src\\components\\Content\\DataUplode\\index.js":"6","D:\\code\\g-project\\src\\components\\Footer\\ResultShow\\index.js":"7","D:\\code\\g-project\\src\\event.js":"8"},{"size":21697,"mtime":1621675981274,"results":"9","hashOfConfig":"10"},{"size":1702,"mtime":1620176906497,"results":"11","hashOfConfig":"10"},{"size":967,"mtime":1619706295952,"results":"12","hashOfConfig":"10"},{"size":3806,"mtime":1621671067889,"results":"13","hashOfConfig":"10"},{"size":3855,"mtime":1621671154065,"results":"14","hashOfConfig":"10"},{"size":4137,"mtime":1620230362921,"results":"15","hashOfConfig":"10"},{"size":25426,"mtime":1621663037570,"results":"16","hashOfConfig":"10"},{"size":74,"mtime":1621663037579,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1r78rn",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\code\\g-project\\src\\index.js",["36","37","38"],"D:\\code\\g-project\\src\\components\\Content\\目标转化事件\\index.js",[],["39","40"],"D:\\code\\g-project\\src\\components\\Content\\查看方式\\index.js",[],"D:\\code\\g-project\\src\\components\\Content\\待归因事件\\index.js",[],"D:\\code\\g-project\\src\\components\\Content\\过程事件\\index.js",[],"D:\\code\\g-project\\src\\components\\Content\\DataUplode\\index.js",[],"D:\\code\\g-project\\src\\components\\Footer\\ResultShow\\index.js",["41","42","43"],"import React, { Component, Fragment } from 'react';\r\nimport { Chart } from '@antv/g2';\r\nimport emitter from \"../../../event\";\r\n//引入组件\r\nimport { Table } from 'antd';\r\n//引入css文件\r\nimport './style.css';\r\n\r\nconst { Column, ColumnGroup } = Table;\r\n\r\nclass ReasultShow extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: [\r\n                // {\r\n                //     key: '1',\r\n                //     touchEvents: 'John',\r\n                //     totalClicks: 'Brown',\r\n                //     clickRate: 32,\r\n                //     durationDistr: '',\r\n                //     stepLengthDistr: ['nice', 'developer'],\r\n                //     valueRealization: 'valueRealization',\r\n                //     contributionRate: 'contributionRate'\r\n                // }\r\n            ]\r\n        }\r\n    }\r\n\r\n    //返回结果数据渲染到页面\r\n    componentDidMount = () => {\r\n        this.eventEmitter = emitter.addListener(\"callMe\", () => {\r\n            // console.log(\"发射器被启动，数据发送到了页面组件中\")\r\n            let update = function () {\r\n                let data = [];\r\n                let result = this.props.resultData\r\n                if (typeof (result) === 'string') {\r\n                    result = eval(`(${result})`)\r\n                }\r\n                // console.log(result)\r\n                if (result[0] !== '' && result[0] !== undefined && result !== '') {\r\n                    for (let i = 1; i <= result[0].length; i++) {\r\n                        data.push({\r\n                            key: i,\r\n                            touchEvents: `${result[0][i - 1][0]}(${result[0][i - 1][1]}) `,\r\n                            totalClicks: result[1][i - 1],\r\n                            clickRate: `${result[2][i - 1]} (${(result[3][i - 1] * 100).toFixed(4) + '%'})`,\r\n                            durationDistr: <div id={`c${i}`}></div>,\r\n                            stepLengthDistr: <div id={`C${i}`} ></div>,\r\n                            // durationDistr: result[4][i-1],\r\n                            // stepLengthDistr: result[5][i-1],\r\n                            valueRealization: result[6][i - 1],\r\n                            contributionRate: `${(result[7][i - 1]*100).toFixed(2)}%`\r\n                        }\r\n                        )\r\n                    }\r\n                }\r\n                return data\r\n            }\r\n            update = update.bind(this)\r\n            let data = update();\r\n            this.setState({\r\n                data\r\n            })\r\n            //bug!!!!!\r\n            // if (this.divElem[1]) {\r\n            //     if (this.divElem[1].innerHTML === '') {\r\n            let timeout = setTimeout(() => {\r\n                // console.log('直方图的第一次渲染')\r\n                let result = this.props.resultData\r\n                if (typeof (result) === 'string') {\r\n                    result = eval(`(${result})`)\r\n                }\r\n                if (result[0] !== '' && result[0] !== undefined && result !== '') {\r\n                    if (result[0].length < 10) {\r\n                        //转换时长\r\n                        for (let i = 1; i <= result[0].length; i++) {\r\n                            const data = [\r\n                                { year: '1', value: result[4][i - 1][0] },\r\n                                { year: '2', value: result[4][i - 1][1] },\r\n                                { year: '3', value: result[4][i - 1][2] },\r\n                                { year: '4', value: result[4][i - 1][3] },\r\n                                { year: '5', value: result[4][i - 1][4] },\r\n                                { year: '6', value: result[4][i - 1][5] },\r\n                                { year: '7', value: result[4][i - 1][6] },\r\n                                { year: '8', value: result[4][i - 1][7] },\r\n                                { year: '9', value: result[4][i - 1][8] },\r\n                                { year: '10', value: result[4][i - 1][9] }\r\n                            ];\r\n                            const chart = new Chart({\r\n                                container: `c${i}`,\r\n                                autoFit: true,\r\n                                height: 100,\r\n                                width: 10\r\n                            });\r\n\r\n                            chart.data(data);\r\n\r\n                            chart.tooltip({\r\n                                showMarkers: false,\r\n                            });\r\n\r\n                            chart.interval().position('year*value');\r\n\r\n                            chart.interaction('element-active');\r\n\r\n                            chart.render();\r\n                        }\r\n                        //转化步长\r\n                        for (let i = 1; i <= result[0].length; i++) {\r\n                            const data = [\r\n                                { year: '1', value: result[5][i - 1][0] },\r\n                                { year: '2', value: result[5][i - 1][1] },\r\n                                { year: '3', value: result[5][i - 1][2] },\r\n                                { year: '4', value: result[5][i - 1][3] },\r\n                                { year: '5', value: result[5][i - 1][4] },\r\n                                { year: '6', value: result[5][i - 1][5] },\r\n                                { year: '7', value: result[5][i - 1][6] },\r\n                                { year: '8', value: result[5][i - 1][7] },\r\n                                { year: '9', value: result[5][i - 1][8] },\r\n                                { year: '10', value: result[5][i - 1][9] }\r\n                            ];\r\n                            const chart = new Chart({\r\n                                container: `C${i}`,\r\n                                autoFit: true,\r\n                                height: 100,\r\n                            });\r\n\r\n                            chart.data(data);\r\n\r\n                            chart.tooltip({\r\n                                showMarkers: false,\r\n                            });\r\n\r\n                            chart.interval().position('year*value');\r\n\r\n                            chart.interaction('element-active');\r\n\r\n                            chart.render();\r\n                        }\r\n                    } else if (result[0].length >= 10) {\r\n                        //转换时长\r\n                        for (let i = 1; i <= 10; i++) {\r\n                            const data = [\r\n                                { year: '1', value: result[4][i - 1][0] },\r\n                                { year: '2', value: result[4][i - 1][1] },\r\n                                { year: '3', value: result[4][i - 1][2] },\r\n                                { year: '4', value: result[4][i - 1][3] },\r\n                                { year: '5', value: result[4][i - 1][4] },\r\n                                { year: '6', value: result[4][i - 1][5] },\r\n                                { year: '7', value: result[4][i - 1][6] },\r\n                                { year: '8', value: result[4][i - 1][7] },\r\n                                { year: '9', value: result[4][i - 1][8] },\r\n                                { year: '10', value: result[4][i - 1][9] }\r\n                            ];\r\n                            const chart = new Chart({\r\n                                container: `c${i}`,\r\n                                autoFit: true,\r\n                                height: 100,\r\n                                width: 10\r\n                            });\r\n\r\n                            chart.data(data);\r\n\r\n                            chart.tooltip({\r\n                                showMarkers: false,\r\n                            });\r\n\r\n                            chart.interval().position('year*value');\r\n\r\n                            chart.interaction('element-active');\r\n\r\n                            chart.render();\r\n                        }\r\n                        //转化步长\r\n                        for (let i = 1; i <= 10; i++) {\r\n                            const data = [\r\n                                { year: '1', value: result[5][i - 1][0] },\r\n                                { year: '2', value: result[5][i - 1][1] },\r\n                                { year: '3', value: result[5][i - 1][2] },\r\n                                { year: '4', value: result[5][i - 1][3] },\r\n                                { year: '5', value: result[5][i - 1][4] },\r\n                                { year: '6', value: result[5][i - 1][5] },\r\n                                { year: '7', value: result[5][i - 1][6] },\r\n                                { year: '8', value: result[5][i - 1][7] },\r\n                                { year: '9', value: result[5][i - 1][8] },\r\n                                { year: '10', value: result[5][i - 1][9] }\r\n                            ];\r\n                            const chart = new Chart({\r\n                                container: `C${i}`,\r\n                                autoFit: true,\r\n                                height: 100,\r\n                            });\r\n\r\n                            chart.data(data);\r\n\r\n                            chart.tooltip({\r\n                                showMarkers: false,\r\n                            });\r\n\r\n                            chart.interval().position('year*value');\r\n\r\n                            chart.interaction('element-active');\r\n\r\n                            chart.render();\r\n                        }\r\n                    }\r\n                }\r\n                clearTimeout(timeout)\r\n            }, 0);\r\n            //     }\r\n            // }\r\n\r\n\r\n        })\r\n    }\r\n\r\n\r\n    componentDidUpdata() {\r\n    }\r\n\r\n    showColumn = () => {\r\n        return (\r\n            <>\r\n                <ColumnGroup title=\"待归因事件\">\r\n                    <Column title=\"触点事件\" dataIndex=\"touchEvents\" key=\"touchEvents\" />\r\n                </ColumnGroup>\r\n                <ColumnGroup title=\"点击规模\">\r\n                    <Column title=\"总点击数\" dataIndex=\"totalClicks\" key=\"totalClicks\" />\r\n                    <Column title=\"有效点击率\" dataIndex=\"clickRate\" key=\"clickRate\" />\r\n                </ColumnGroup>\r\n                <ColumnGroup title=\"转化分布\">\r\n                    <Column title=\"转化时长分布\" dataIndex=\"durationDistr\" key=\"durationDistr\" />\r\n                    <Column title=\"转化步长分布\" dataIndex=\"stepLengthDistr\" key=\"stepLengthDistr\" />\r\n                </ColumnGroup>\r\n                <ColumnGroup title=\"目标转化\">\r\n                    <Column title=\"实现价值\" dataIndex=\"valueRealization\" key=\"valueRealization\" />\r\n                    <Column title=\"贡献率\" dataIndex=\"contributionRate\" key=\"contributionRate\" />\r\n                </ColumnGroup>\r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n    render() {\r\n        let result = this.props.resultData\r\n        if (typeof (result) === 'string') {\r\n            result = eval(`(${result})`)\r\n        }\r\n        return (\r\n            <Fragment>\r\n                <Table\r\n                    bordered={true}\r\n                    dataSource={this.state.data}\r\n                    className='reasult'\r\n                    pagination={{\r\n                        position: ['bottomCenter'],\r\n                        pageSize: 10,\r\n                        // 只有一页是不显示分页按钮\r\n                        hideOnSinglePage: true,\r\n                        onChange: function (page) {\r\n                            let timeout = setTimeout(function () {\r\n                                if (result[0] !== '' && result[0] !== undefined && result !== '') {\r\n                                    if (result[0].length <= 10) {\r\n                                        //转化时长分布\r\n                                        for (let i = (page - 1) * 10 + 1; i <= result[0].length; i++) {\r\n                                            const data = [\r\n                                                { year: '1', value: result[4][i - 1][0] },\r\n                                                { year: '2', value: result[4][i - 1][1] },\r\n                                                { year: '3', value: result[4][i - 1][2] },\r\n                                                { year: '4', value: result[4][i - 1][3] },\r\n                                                { year: '5', value: result[4][i - 1][4] },\r\n                                                { year: '6', value: result[4][i - 1][5] },\r\n                                                { year: '7', value: result[4][i - 1][6] },\r\n                                                { year: '8', value: result[4][i - 1][7] },\r\n                                                { year: '9', value: result[4][i - 1][8] },\r\n                                                { year: '10', value: result[4][i - 1][9] }\r\n                                            ];\r\n                                            const chart = new Chart({\r\n                                                container: `c${i}`,\r\n                                                autoFit: true,\r\n                                                height: 100,\r\n                                            });\r\n\r\n                                            chart.data(data);\r\n\r\n                                            chart.tooltip({\r\n                                                showMarkers: false,\r\n                                            });\r\n\r\n                                            chart.interval().position('year*value');\r\n\r\n                                            chart.interaction('element-active');\r\n\r\n                                            chart.render();\r\n\r\n                                        }\r\n                                        //转化步长分布\r\n                                        for (let i = (page - 1) * 10 + 1; i <= result[0].length; i++) {\r\n                                            const data = [\r\n                                                { year: '1', value: result[5][i - 1][0] },\r\n                                                { year: '2', value: result[5][i - 1][1] },\r\n                                                { year: '3', value: result[5][i - 1][2] },\r\n                                                { year: '4', value: result[5][i - 1][3] },\r\n                                                { year: '5', value: result[5][i - 1][4] },\r\n                                                { year: '6', value: result[5][i - 1][5] },\r\n                                                { year: '7', value: result[5][i - 1][6] },\r\n                                                { year: '8', value: result[5][i - 1][7] },\r\n                                                { year: '9', value: result[5][i - 1][8] },\r\n                                                { year: '10', value: result[5][i - 1][9] }\r\n                                            ];\r\n                                            const chart = new Chart({\r\n                                                container: `C${i}`,\r\n                                                autoFit: true,\r\n                                                height: 100,\r\n                                            });\r\n\r\n                                            chart.data(data);\r\n\r\n                                            chart.tooltip({\r\n                                                showMarkers: false,\r\n                                            });\r\n\r\n                                            chart.interval().position('year*value');\r\n\r\n                                            chart.interaction('element-active');\r\n\r\n                                            chart.render();\r\n\r\n                                        }\r\n                                    } else if (result[0].length > 10) {\r\n                                        let theOther = result[0].length % 10\r\n                                        let pageTotalNumber = parseInt(result[0].length / 10)\r\n                                        if (page <= pageTotalNumber) {\r\n                                            //转化时长分布\r\n                                            for (let i = (page - 1) * 10 + 1; i <= page * 10; i++) {\r\n                                                const data = [\r\n                                                    { year: '1', value: result[4][i - 1][0] },\r\n                                                    { year: '2', value: result[4][i - 1][1] },\r\n                                                    { year: '3', value: result[4][i - 1][2] },\r\n                                                    { year: '4', value: result[4][i - 1][3] },\r\n                                                    { year: '5', value: result[4][i - 1][4] },\r\n                                                    { year: '6', value: result[4][i - 1][5] },\r\n                                                    { year: '7', value: result[4][i - 1][6] },\r\n                                                    { year: '8', value: result[4][i - 1][7] },\r\n                                                    { year: '9', value: result[4][i - 1][8] },\r\n                                                    { year: '10', value: result[4][i - 1][9] }\r\n                                                ];\r\n                                                const chart = new Chart({\r\n                                                    container: `c${i}`,\r\n                                                    autoFit: true,\r\n                                                    height: 100,\r\n                                                });\r\n\r\n                                                chart.data(data);\r\n\r\n                                                chart.tooltip({\r\n                                                    showMarkers: false,\r\n                                                });\r\n\r\n                                                chart.interval().position('year*value');\r\n\r\n                                                chart.interaction('element-active');\r\n\r\n                                                chart.render();\r\n\r\n                                            }\r\n                                            //转化步长分布\r\n                                            for (let i = (page - 1) * 10 + 1; i <= page * 10; i++) {\r\n                                                const data = [\r\n                                                    { year: '1', value: result[5][i - 1][0] },\r\n                                                    { year: '2', value: result[5][i - 1][1] },\r\n                                                    { year: '3', value: result[5][i - 1][2] },\r\n                                                    { year: '4', value: result[5][i - 1][3] },\r\n                                                    { year: '5', value: result[5][i - 1][4] },\r\n                                                    { year: '6', value: result[5][i - 1][5] },\r\n                                                    { year: '7', value: result[5][i - 1][6] },\r\n                                                    { year: '8', value: result[5][i - 1][7] },\r\n                                                    { year: '9', value: result[5][i - 1][8] },\r\n                                                    { year: '10', value: result[5][i - 1][9] }\r\n                                                ];\r\n                                                const chart = new Chart({\r\n                                                    container: `C${i}`,\r\n                                                    autoFit: true,\r\n                                                    height: 100,\r\n                                                });\r\n\r\n                                                chart.data(data);\r\n\r\n                                                chart.tooltip({\r\n                                                    showMarkers: false,\r\n                                                });\r\n\r\n                                                chart.interval().position('year*value');\r\n\r\n                                                chart.interaction('element-active');\r\n\r\n                                                chart.render();\r\n\r\n                                            }\r\n                                        } else if (page === pageTotalNumber + 1) {\r\n                                            //转化时长分布\r\n                                            for (let i = (page - 1) * 10 + 1; i <= (page - 1) * 10 + theOther; i++) {\r\n                                                const data = [\r\n                                                    { year: '1', value: result[4][i - 1][0] },\r\n                                                    { year: '2', value: result[4][i - 1][1] },\r\n                                                    { year: '3', value: result[4][i - 1][2] },\r\n                                                    { year: '4', value: result[4][i - 1][3] },\r\n                                                    { year: '5', value: result[4][i - 1][4] },\r\n                                                    { year: '6', value: result[4][i - 1][5] },\r\n                                                    { year: '7', value: result[4][i - 1][6] },\r\n                                                    { year: '8', value: result[4][i - 1][7] },\r\n                                                    { year: '9', value: result[4][i - 1][8] },\r\n                                                    { year: '10', value: result[4][i - 1][9] }\r\n                                                ];\r\n                                                const chart = new Chart({\r\n                                                    container: `c${i}`,\r\n                                                    autoFit: true,\r\n                                                    height: 100,\r\n                                                });\r\n\r\n                                                chart.data(data);\r\n\r\n                                                chart.tooltip({\r\n                                                    showMarkers: false,\r\n                                                });\r\n\r\n                                                chart.interval().position('year*value');\r\n\r\n                                                chart.interaction('element-active');\r\n\r\n                                                chart.render();\r\n\r\n                                            }\r\n                                            //转化步长分布\r\n                                            for (let i = (page - 1) * 10 + 1; i <= (page - 1) * 10 + theOther; i++) {\r\n                                                const data = [\r\n                                                    { year: '1', value: result[5][i - 1][0] },\r\n                                                    { year: '2', value: result[5][i - 1][1] },\r\n                                                    { year: '3', value: result[5][i - 1][2] },\r\n                                                    { year: '4', value: result[5][i - 1][3] },\r\n                                                    { year: '5', value: result[5][i - 1][4] },\r\n                                                    { year: '6', value: result[5][i - 1][5] },\r\n                                                    { year: '7', value: result[5][i - 1][6] },\r\n                                                    { year: '8', value: result[5][i - 1][7] },\r\n                                                    { year: '9', value: result[5][i - 1][8] },\r\n                                                    { year: '10', value: result[5][i - 1][9] }\r\n                                                ];\r\n                                                const chart = new Chart({\r\n                                                    container: `C${i}`,\r\n                                                    autoFit: true,\r\n                                                    height: 100,\r\n                                                });\r\n\r\n                                                chart.data(data);\r\n\r\n                                                chart.tooltip({\r\n                                                    showMarkers: false,\r\n                                                });\r\n\r\n                                                chart.interval().position('year*value');\r\n\r\n                                                chart.interaction('element-active');\r\n\r\n                                                chart.render();\r\n\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                                clearTimeout(timeout)\r\n                            }, 0)\r\n                        }\r\n\r\n                    }}\r\n                    scroll={{\r\n                        y: 290\r\n                    }}\r\n                    tableLayout='fixed'\r\n                    style={{ minWidth: 700 }}\r\n                >\r\n                    {this.showColumn()}\r\n                </Table>\r\n            </Fragment >\r\n        )\r\n    }\r\n}\r\n\r\nexport default ReasultShow;","D:\\code\\g-project\\src\\event.js",[],{"ruleId":"44","severity":1,"message":"45","line":231,"column":75,"nodeType":"46","messageId":"47","endLine":231,"endColumn":77},{"ruleId":"44","severity":1,"message":"45","line":236,"column":79,"nodeType":"46","messageId":"47","endLine":236,"endColumn":81},{"ruleId":"48","severity":1,"message":"49","line":248,"column":32,"nodeType":"50","messageId":"51","endLine":248,"endColumn":36},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"48","severity":1,"message":"49","line":39,"column":30,"nodeType":"50","messageId":"51","endLine":39,"endColumn":34},{"ruleId":"48","severity":1,"message":"49","line":73,"column":30,"nodeType":"50","messageId":"51","endLine":73,"endColumn":34},{"ruleId":"48","severity":1,"message":"49","line":249,"column":22,"nodeType":"50","messageId":"51","endLine":249,"endColumn":26},"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-eval","eval can be harmful.","CallExpression","unexpected","no-native-reassign",["56"],"no-negated-in-lhs",["57"],"no-global-assign","no-unsafe-negation"]