[{"D:\\code\\g-project\\src\\index.js":"1","D:\\code\\g-project\\src\\components\\Content\\目标转化事件\\index.js":"2","D:\\code\\g-project\\src\\components\\Content\\查看方式\\index.js":"3","D:\\code\\g-project\\src\\components\\Content\\待归因事件\\index.js":"4","D:\\code\\g-project\\src\\components\\Content\\过程事件\\index.js":"5","D:\\code\\g-project\\src\\components\\Content\\DataUplode\\index.js":"6","D:\\code\\g-project\\src\\components\\Footer\\ResultShow\\index.js":"7","D:\\code\\g-project\\src\\event.js":"8"},{"size":20422,"mtime":1620276773400,"results":"9","hashOfConfig":"10"},{"size":1702,"mtime":1620176906497,"results":"11","hashOfConfig":"10"},{"size":967,"mtime":1619706295952,"results":"12","hashOfConfig":"10"},{"size":3629,"mtime":1619712437347,"results":"13","hashOfConfig":"10"},{"size":3767,"mtime":1619712443509,"results":"14","hashOfConfig":"10"},{"size":4137,"mtime":1620230362921,"results":"15","hashOfConfig":"10"},{"size":25417,"mtime":1620276064910,"results":"16","hashOfConfig":"10"},{"size":76,"mtime":1620174901677,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"1r78rn",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"23"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"D:\\code\\g-project\\src\\index.js",["37"],"import React, { Component } from 'react';\nimport ReactDom from 'react-dom';\nimport axios from 'axios';\nimport emitter from './event';\n//引入组件\nimport { Layout } from 'antd';\nimport ContentFirst from './components/Content/目标转化事件/index';\nimport ContentSecond from './components/Content/待归因事件/index';\nimport ContentThird from './components/Content/过程事件/index';\nimport ContentFourth from './components/Content/查看方式/index';\nimport DataUplode from './components/Content/DataUplode/index';\nimport ReasultShow from './components/Footer/ResultShow/index';\n//引入图标\nimport { SendOutlined } from '@ant-design/icons';\n//引入css文件\nimport 'antd/dist/antd.css';\nimport './style.css';\n\nconst { Header, Footer, Content } = Layout;\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            events: [],\n            attrs: [],\n            values: [],\n            sendData: {\n                targetEvent: \"\",\n                processEvents: [\n                    \"\"\n                ],\n                touchEvents: [\n                    \"\"\n                ],\n                valueAttr: \"\",\n                beginTime: '',\n                endTime: '',\n                mode: '',\n                window: '',\n                otherConverse: 0,\n                N: ''\n\n                // targetEvent: \"success\",\n                // processEvents: [\n                //     \"details\"\n                // ],\n                // touchEvents: [\n                //     \"browse\"\n                // ],\n                // valueAttr: \"amount\",\n                // beginTime: '0',\n                // endTime: '6000',\n                // mode: '0',\n                // window: '86400',\n                // otherConverse: 1,\n                // N: '0'\n\n\n            },\n            resultData: [\n                // [['browse', '活动页'], ['browse', '赠品页'], ['$other_conversions', ''], ['browse', '红包页'], ['browse', '折扣页'],['browse', '活动页'], ['browse', '赠品页'], ['$other_conversions', ''], ['browse', '红包页'], ['browse', '折扣页'],['browse', '活动页'], ['browse', '赠品页'], ['$other_conversions', ''], ['browse', '红包页'], ['browse', '折扣页'],['browse', '活动页'], ['browse', '赠品页'], ['$other_conversions', ''], ['browse', '红包页'], ['browse', '折扣页'],['browse', '活动页'], ['browse', '赠品页'], ['$other_conversions', ''], ['browse', '红包页'], ['browse', '折扣页'],['browse', '活动页'], ['browse', '赠品页'], ['$other_conversions', ''], ['browse', '红包页'], ['browse', '折扣页'],['browse', '活动页'], ['browse', '赠品页'], ['$other_conversions', ''], ['browse', '红包页'], ['browse', '折扣页'],['browse', '活动页'], ['browse', '赠品页'], ['$other_conversions', ''], ['browse', '红包页'], ['browse', '折扣页'],['browse', '活动页'], ['browse', '赠品页'], ['$other_conversions', ''], ['browse', '红包页'], ['browse', '折扣页'],['browse', '活动页'], ['browse', '赠品页'], ['$other_conversions', ''], ['browse', '红包页'], ['browse', '折扣页']],\n                // [10, 5, 6, 2, 7,10, 5, 6, 2, 7,10, 5, 6, 2, 7,10, 5, 6, 2, 7,10, 5, 6, 2, 7,10, 5, 6, 2, 7,10, 5, 6, 2, 7,10, 5, 6, 2, 7,10, 5, 6, 2, 7,10, 5, 6, 2, 7],\n                // [4, 1, 0, 2, 6,4, 1, 0, 2, 6,4, 1, 0, 2, 6,4, 1, 0, 2, 6,4, 1, 0, 2, 6,4, 1, 0, 2, 6,4, 1, 0, 2, 6,4, 1, 0, 2, 6,4, 1, 0, 2, 6,4, 1, 0, 2, 6],\n                // [0.4, 0.2, 0, 1, 0.8571428571428571,0.4, 0.2, 0, 1, 0.8571428571428571,0.4, 0.2, 0, 1, 0.8571428571428571,0.4, 0.2, 0, 1, 0.8571428571428571,0.4, 0.2, 0, 1, 0.8571428571428571,0.4, 0.2, 0, 1, 0.8571428571428571,0.4, 0.2, 0, 1, 0.8571428571428571,0.4, 0.2, 0, 1, 0.8571428571428571,0.4, 0.2, 0, 1, 0.8571428571428571,0.4, 0.2, 0, 1, 0.8571428571428571],\n                // [[2, 0, 0, 0, 0, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [],[2, 0, 0, 0, 0, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [],[2, 0, 0, 0, 0, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [],[2, 0, 0, 0, 0, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [],[2, 0, 0, 0, 0, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [],[2, 0, 0, 0, 0, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [],[2, 0, 0, 0, 0, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [],[2, 0, 0, 0, 0, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [],[2, 0, 0, 0, 0, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [],[2, 0, 0, 0, 0, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], []],\n                // [[1, 2, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [],[1, 2, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [],[1, 2, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [],[1, 2, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [],[1, 2, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [],[1, 2, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [],[1, 2, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [],[1, 2, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [],[1, 2, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [],[1, 2, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], []],\n                // [5, 5, 40, 10, 10,5, 5, 40, 10, 10,5, 5, 40, 10, 10,5, 5, 40, 10, 10,5, 5, 40, 10, 10,5, 5, 40, 10, 10,5, 5, 40, 10, 10,5, 5, 40, 10, 10,5, 5, 40, 10, 10,5, 5, 40, 10, 10],\n                // [0.07142857142857142, 0.07142857142857142, 0.5714285714285714, 0.14285714285714285, 0.14285714285714285,0.07142857142857142, 0.07142857142857142, 0.5714285714285714, 0.14285714285714285, 0.14285714285714285,0.07142857142857142, 0.07142857142857142, 0.5714285714285714, 0.14285714285714285, 0.14285714285714285,0.07142857142857142, 0.07142857142857142, 0.5714285714285714, 0.14285714285714285, 0.14285714285714285,0.07142857142857142, 0.07142857142857142, 0.5714285714285714, 0.14285714285714285, 0.14285714285714285,0.07142857142857142, 0.07142857142857142, 0.5714285714285714, 0.14285714285714285, 0.14285714285714285,0.07142857142857142, 0.07142857142857142, 0.5714285714285714, 0.14285714285714285, 0.14285714285714285,0.07142857142857142, 0.07142857142857142, 0.5714285714285714, 0.14285714285714285, 0.14285714285714285,0.07142857142857142, 0.07142857142857142, 0.5714285714285714, 0.14285714285714285, 0.14285714285714285,0.07142857142857142, 0.07142857142857142, 0.5714285714285714, 0.14285714285714285, 0.14285714285714285]\n\n                // [['browse', '活动页'], ['browse', '赠品页'], ['$other_conversions', ''], ['browse', '红包页'], ['browse', '折扣页'], ['browse', '活动页'], ['browse', '赠品页'], ['$other_conversions', ''], ['browse', '红包页'], ['browse', '折扣页'], ['browse', '活动页'], ['browse', '赠品页'], ['$other_conversions', ''], ['browse', '红包页'], ['browse', '折扣页'], ['browse', '活动页'], ['browse', '赠品页'], ['$other_conversions', ''], ['browse', '红包页'], ['browse', '折扣页'], ['browse', '活动页'], ['browse', '赠品页'], ['$other_conversions', ''], ['browse', '红包页'], ['browse', '折扣页']],\n                // [10, 5, 6, 2, 7, 10, 5, 6, 2, 7, 10, 5, 6, 2, 7, 10, 5, 6, 2, 7, 10, 5, 6, 2, 7],\n                // [4, 1, 0, 2, 6, 4, 1, 0, 2, 6, 4, 1, 0, 2, 6, 4, 1, 0, 2, 6, 4, 1, 0, 2, 6],\n                // [0.4, 0.2, 0, 1, 0.8571428571428571, 0.4, 0.2, 0, 1, 0.8571428571428571, 0.4, 0.2, 0, 1, 0.8571428571428571, 0.4, 0.2, 0, 1, 0.8571428571428571, 0.4, 0.2, 0, 1, 0.8571428571428571],\n                // [[2, 0, 0, 0, 0, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [], [2, 0, 0, 0, 0, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [], [2, 0, 0, 0, 0, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [], [2, 0, 0, 0, 0, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [], [2, 0, 0, 0, 0, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], []],\n                // [[1, 2, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [], [1, 2, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [], [1, 2, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [], [1, 2, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [], [1, 2, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], []],\n                // [5, 5, 40, 10, 10, 5, 5, 40, 10, 10, 5, 5, 40, 10, 10, 5, 5, 40, 10, 10, 5, 5, 40, 10, 10],\n                // [0.07142857142857142, 0.07142857142857142, 0.5714285714285714, 0.14285714285714285, 0.14285714285714285, 0.07142857142857142, 0.07142857142857142, 0.5714285714285714, 0.14285714285714285, 0.14285714285714285, 0.07142857142857142, 0.07142857142857142, 0.5714285714285714, 0.14285714285714285, 0.14285714285714285, 0.07142857142857142, 0.07142857142857142, 0.5714285714285714, 0.14285714285714285, 0.14285714285714285, 0.07142857142857142, 0.07142857142857142, 0.5714285714285714, 0.14285714285714285, 0.14285714285714285]\n\n                // [['browse', '活动页'], ['browse', '赠品页'], ['$other_conversions', ''], ['browse', '红包页'], ['browse', '折扣页']],\n                // [10, 5, 6, 2, 7],\n                // [4, 1, 0, 2, 6],\n                // [0.4, 0.2, 0, 1, 0.8571428571428571],\n                // [[2, 0, 0, 0, 0, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], []],\n                // [[1, 2, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], []],\n                // [5, 5, 40, 10, 10],\n                // [0.07142857142857142, 0.07142857142857142, 0.5714285714285714, 0.14285714285714285, 0.14285714285714285]\n            ]\n        }\n    }\n\n    componentDidMount() {\n        //接口请求数据\n        //events\n        axios.get('/events')\n            .then((res) => {\n                this.setState({\n                    events: res.data\n                })\n                // console.log(this.state.events)\n            })\n            .catch((err) => {\n                console.log(err)\n            })\n        //attrs\n        axios.get('/attrs')\n            .then((res) => {\n                this.setState({\n                    attrs: res.data\n                })\n                // console.log(this.state.attrs)\n            })\n            .catch((err) => {\n                console.log(err)\n            })\n        //values\n        axios.get('/values')\n            .then((res) => {\n                this.setState({\n                    values: res.data\n                })\n                // console.log(this.state.values)\n            })\n            .catch((err) => {\n                console.log(err)\n            })\n    }\n\n    //获取目标转化事件的数据\n    acqTargetEventData = (value) => {\n        let sendData = this.state.sendData\n        sendData.targetEvent = value\n        this.setState({\n            sendData\n        })\n    }\n    //获取过程事件的数据\n    acqProcessEventData = (index, value) => {\n        let sendData = this.state.sendData\n        sendData.processEvents[index] = value\n        this.setState({\n            sendData\n        })\n    }\n    //删除过程事件的数据\n    deleteProcessEventData = (index) => {\n        this.state.sendData.processEvents.splice(index, 1)\n    }\n    //获取待归因事件的数据\n    acqTouchEventData = (index, value) => {\n        let sendData = this.state.sendData\n        sendData.touchEvents[index] = value\n        this.setState({\n            sendData\n        })\n    }\n    //删除待归因事件的数据\n    deleteTouchEventData = (index) => {\n        this.state.sendData.touchEvents.splice(index, 1)\n    }\n    //获取查看方式的数据\n    acqValueAttrData = (value) => {\n        let sendData = this.state.sendData\n        sendData.valueAttr = value\n        this.setState({\n            sendData\n        })\n    }\n    //获取时间的数据\n    acqStartTimeData = (value) => {\n        let sendData = this.state.sendData\n        sendData.beginTime = value\n        this.setState({\n            sendData\n        })\n    }\n    acqEndTimeData = (value) => {\n        let sendData = this.state.sendData\n        sendData.endTime = value\n        this.setState({\n            sendData\n        })\n    }\n    //获取归因模型的数据\n    acqGuiyinmodeData = (value) => {\n        let sendData = this.state.sendData\n        sendData.mode = value\n        this.setState({\n            sendData\n        })\n    }\n    //获取归因窗口期的数据\n    acqGuiyinWindowData = (value) => {\n        let sendData = this.state.sendData\n        sendData.window = value\n        this.setState({\n            sendData\n        })\n    }\n    //获取是否转于其他规划的数据\n    acqOtherConverseData = (value) => {\n        let sendData = this.state.sendData\n        sendData.otherConverse = value\n        this.setState({\n            sendData\n        })\n    }\n    //获取展示条数的数据\n    acqNData = (value) => {\n        let sendData = this.state.sendData\n        sendData.N = value\n        this.setState({\n            sendData\n        })\n    }\n\n    // 发送请求\n    sendPostandAcquireRes = () => {\n        console.log('发送前的发送数据', this.state.sendData)\n        // 发送请求\n        axios.post('/result', this.state.sendData)\n            .then(res => {\n                if (typeof (res.data) === 'string') {\n                    res.data = eval(`(${res.data})`)\n                }\n                console.log(res.data[0].length)\n                for (let i = 0; i < res.data[0].length; i++) {\n                    if (res.data[0][i][0] === '$other_conversions') {\n                        res.data[0][i][0] = '其他转换'\n                    }\n                    if (res.data[0][i][1] === '$other_conversions') {\n                        res.data[0][i][1] = '其他转换'\n                    }\n                }\n                //先让结果表中的数据清零 \n                let Timeout = setTimeout(() => {\n                    this.setState({\n                        resultData: [\n                            // [['browse', '活动页'], ['browse', '赠品页'], ['$other_conversions', ''], ['browse', '红包页'], ['browse', '折扣页'], ['browse', '活动页'], ['browse', '赠品页'], ['$other_conversions', ''], ['browse', '红包页'], ['browse', '折扣页'], ['browse', '活动页'], ['browse', '赠品页'], ['$other_conversions', ''], ['browse', '红包页'], ['browse', '折扣页'], ['browse', '活动页'], ['browse', '赠品页'], ['$other_conversions', ''], ['browse', '红包页'], ['browse', '折扣页'], ['browse', '活动页'], ['browse', '赠品页'], ['$other_conversions', ''], ['browse', '红包页'], ['browse', '折扣页']],\n                            // [10, 5, 6, 2, 7, 10, 5, 6, 2, 7, 10, 5, 6, 2, 7, 10, 5, 6, 2, 7, 10, 5, 6, 2, 7],\n                            // [4, 1, 0, 2, 6, 4, 1, 0, 2, 6, 4, 1, 0, 2, 6, 4, 1, 0, 2, 6, 4, 1, 0, 2, 6],\n                            // [0.4, 0.2, 0, 1, 0.8571428571428571, 0.4, 0.2, 0, 1, 0.8571428571428571, 0.4, 0.2, 0, 1, 0.8571428571428571, 0.4, 0.2, 0, 1, 0.8571428571428571, 0.4, 0.2, 0, 1, 0.8571428571428571],\n                            // [[2, 10, 10, 10, 10, 10, 11, 12, 1, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [], [2, 0, 0, 0, 0, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [], [2, 0, 0, 0, 0, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [], [2, 0, 0, 0, 0, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [], [2, 0, 0, 0, 0, 0, 1, 0, 0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], []],\n                            // [[1, 2, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [], [1, 2, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [], [1, 2, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [], [1, 2, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], [], [1, 2, 1, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0], [], []],\n                            // [5, 5, 40, 10, 10, 5, 5, 40, 10, 10, 5, 5, 40, 10, 10, 5, 5, 40, 10, 10, 5, 5, 40, 10, 10],\n                            // [0.07142857142857142, 0.07142857142857142, 0.5714285714285714, 0.14285714285714285, 0.14285714285714285, 0.07142857142857142, 0.07142857142857142, 0.5714285714285714, 0.14285714285714285, 0.14285714285714285, 0.07142857142857142, 0.07142857142857142, 0.5714285714285714, 0.14285714285714285, 0.14285714285714285, 0.07142857142857142, 0.07142857142857142, 0.5714285714285714, 0.14285714285714285, 0.14285714285714285, 0.07142857142857142, 0.07142857142857142, 0.5714285714285714, 0.14285714285714285, 0.14285714285714285]\n                            [],\n                            [],\n                            [],\n                            [],\n                            [],\n                            [],\n                            [],\n                            []\n                        ]\n                    })\n                    emitter.emit('callMe')\n                    clearTimeout(Timeout)\n                }, 0);\n\n\n                let timeout = setTimeout(() => {\n                    this.setState({\n                        resultData: res.data\n                    })\n                    console.log('接收到的结果数据', this.state.resultData)\n                    emitter.emit('callMe')\n                    clearTimeout(timeout)\n                }, 200);\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }\n\n    render() {\n        return (\n            <Layout className='layout'>\n                <Header className='header'>\n                    归因分析\n                </Header>\n                <Content className='content'>\n                    <h1 className='primarytitle'><SendOutlined className='icon icon_top' />选择事件</h1>\n                    <div id='top'>\n                        <div className='contentfirst'>\n                            <span className='secondarytitle span'>目标转化事件：</span>\n                            <ContentFirst events={this.state.events} attrs={this.state.attrs} acqTargetEventData={this.acqTargetEventData} />\n                        </div>\n                        <div className='contentsecond'>\n                            <p className='secondarytitle'>待归因事件：</p>\n                            <ContentSecond events={this.state.events} attrs={this.state.attrs} acqTouchEventData={this.acqTouchEventData} deleteTouchEventData={this.deleteTouchEventData} />\n                        </div>\n                        <div className='contentthird'>\n                            <p className='secondarytitle'>过程事件：</p>\n                            <ContentThird events={this.state.events} attrs={this.state.attrs} acqProcessEventData={this.acqProcessEventData} deleteProcessEventData={this.deleteProcessEventData} />\n                        </div>\n                        <div className='contentfourth'>\n                            <p className='secondarytitle'>查看方式：</p>\n                            <ContentFourth values={this.state.values} acqValueAttrData={this.acqValueAttrData} />\n                        </div>\n                    </div>\n                    <div className='middle' >\n                        <div className='contentfifth'>\n                            <DataUplode\n                                acqStartTimeData={this.acqStartTimeData}\n                                acqEndTimeData={this.acqEndTimeData}\n                                acqGuiyinmodeData={this.acqGuiyinmodeData}\n                                acqGuiyinWindowData={this.acqGuiyinWindowData}\n                                acqOtherConverseData={this.acqOtherConverseData}\n                                acqNData={this.acqNData}\n                                sendPostandAcquireRes={this.sendPostandAcquireRes}\n                            />\n                        </div>\n                    </div>\n                </Content>\n                <Footer className='footer'>\n                    <ReasultShow resultData={this.state.resultData} sendData={this.state.sendData} />\n                </Footer>\n            </Layout>\n        )\n    }\n}\n\nReactDom.render(<App />, document.getElementById('root'))\n\n","D:\\code\\g-project\\src\\components\\Content\\目标转化事件\\index.js",[],["38","39"],"D:\\code\\g-project\\src\\components\\Content\\查看方式\\index.js",[],"D:\\code\\g-project\\src\\components\\Content\\待归因事件\\index.js",[],"D:\\code\\g-project\\src\\components\\Content\\过程事件\\index.js",[],"D:\\code\\g-project\\src\\components\\Content\\DataUplode\\index.js",[],"D:\\code\\g-project\\src\\components\\Footer\\ResultShow\\index.js",["40","41","42"],"import React, { Component, Fragment } from 'react';\r\nimport { Chart } from '@antv/g2';\r\nimport emitter from \"../../../event\";\r\n//引入组件\r\nimport { Table } from 'antd';\r\n//引入css文件\r\nimport './style.css';\r\n\r\nconst { Column, ColumnGroup } = Table;\r\n\r\nclass ReasultShow extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: [\r\n                // {\r\n                //     key: '1',\r\n                //     touchEvents: 'John',\r\n                //     totalClicks: 'Brown',\r\n                //     clickRate: 32,\r\n                //     durationDistr: '',\r\n                //     stepLengthDistr: ['nice', 'developer'],\r\n                //     valueRealization: 'valueRealization',\r\n                //     contributionRate: 'contributionRate'\r\n                // }\r\n            ]\r\n        }\r\n    }\r\n\r\n    //返回结果数据渲染到页面\r\n    componentDidMount = () => {\r\n        this.eventEmitter = emitter.addListener(\"callMe\", () => {\r\n            console.log(\"发射器被启动，数据发送到了页面组件中\")\r\n            let update = function () {\r\n                let data = [];\r\n                let result = this.props.resultData\r\n                if (typeof (result) === 'string') {\r\n                    result = eval(`(${result})`)\r\n                }\r\n                console.log(result)\r\n                if (result[0] !== '' && result[0] !== undefined && result !== '') {\r\n                    for (let i = 1; i <= result[0].length; i++) {\r\n                        data.push({\r\n                            key: i,\r\n                            touchEvents: `${result[0][i - 1][0]}(${result[0][i - 1][1]}) `,\r\n                            totalClicks: result[1][i - 1],\r\n                            clickRate: `${result[2][i - 1]} (${(result[3][i - 1]).toFixed(4) * 100 + '%'})`,\r\n                            durationDistr: <div id={`c${i}`}></div>,\r\n                            stepLengthDistr: <div id={`C${i}`} ></div>,\r\n                            // durationDistr: result[4][i-1],\r\n                            // stepLengthDistr: result[5][i-1],\r\n                            valueRealization: result[6][i - 1],\r\n                            contributionRate: `${(result[7][i - 1]*100).toFixed(2)}%`\r\n                        }\r\n                        )\r\n                    }\r\n                }\r\n                return data\r\n            }\r\n            update = update.bind(this)\r\n            let data = update();\r\n            this.setState({\r\n                data\r\n            })\r\n            //bug!!!!!\r\n            // if (this.divElem[1]) {\r\n            //     if (this.divElem[1].innerHTML === '') {\r\n            let timeout = setTimeout(() => {\r\n                console.log('直方图的第一次渲染')\r\n                let result = this.props.resultData\r\n                if (typeof (result) === 'string') {\r\n                    result = eval(`(${result})`)\r\n                }\r\n                if (result[0] !== '' && result[0] !== undefined && result !== '') {\r\n                    if (result[0].length < 10) {\r\n                        //转换时长\r\n                        for (let i = 1; i <= result[0].length; i++) {\r\n                            const data = [\r\n                                { year: '1', value: result[4][i - 1][0] },\r\n                                { year: '2', value: result[4][i - 1][1] },\r\n                                { year: '3', value: result[4][i - 1][2] },\r\n                                { year: '4', value: result[4][i - 1][3] },\r\n                                { year: '5', value: result[4][i - 1][4] },\r\n                                { year: '6', value: result[4][i - 1][5] },\r\n                                { year: '7', value: result[4][i - 1][6] },\r\n                                { year: '8', value: result[4][i - 1][7] },\r\n                                { year: '9', value: result[4][i - 1][8] },\r\n                                { year: '10', value: result[4][i - 1][9] }\r\n                            ];\r\n                            const chart = new Chart({\r\n                                container: `c${i}`,\r\n                                autoFit: true,\r\n                                height: 100,\r\n                                width: 10\r\n                            });\r\n\r\n                            chart.data(data);\r\n\r\n                            chart.tooltip({\r\n                                showMarkers: false,\r\n                            });\r\n\r\n                            chart.interval().position('year*value');\r\n\r\n                            chart.interaction('element-active');\r\n\r\n                            chart.render();\r\n                        }\r\n                        //转化步长\r\n                        for (let i = 1; i <= result[0].length; i++) {\r\n                            const data = [\r\n                                { year: '1', value: result[5][i - 1][0] },\r\n                                { year: '2', value: result[5][i - 1][1] },\r\n                                { year: '3', value: result[5][i - 1][2] },\r\n                                { year: '4', value: result[5][i - 1][3] },\r\n                                { year: '5', value: result[5][i - 1][4] },\r\n                                { year: '6', value: result[5][i - 1][5] },\r\n                                { year: '7', value: result[5][i - 1][6] },\r\n                                { year: '8', value: result[5][i - 1][7] },\r\n                                { year: '9', value: result[5][i - 1][8] },\r\n                                { year: '10', value: result[5][i - 1][9] }\r\n                            ];\r\n                            const chart = new Chart({\r\n                                container: `C${i}`,\r\n                                autoFit: true,\r\n                                height: 100,\r\n                            });\r\n\r\n                            chart.data(data);\r\n\r\n                            chart.tooltip({\r\n                                showMarkers: false,\r\n                            });\r\n\r\n                            chart.interval().position('year*value');\r\n\r\n                            chart.interaction('element-active');\r\n\r\n                            chart.render();\r\n                        }\r\n                    } else if (result[0].length >= 10) {\r\n                        //转换时长\r\n                        for (let i = 1; i <= 10; i++) {\r\n                            const data = [\r\n                                { year: '1', value: result[4][i - 1][0] },\r\n                                { year: '2', value: result[4][i - 1][1] },\r\n                                { year: '3', value: result[4][i - 1][2] },\r\n                                { year: '4', value: result[4][i - 1][3] },\r\n                                { year: '5', value: result[4][i - 1][4] },\r\n                                { year: '6', value: result[4][i - 1][5] },\r\n                                { year: '7', value: result[4][i - 1][6] },\r\n                                { year: '8', value: result[4][i - 1][7] },\r\n                                { year: '9', value: result[4][i - 1][8] },\r\n                                { year: '10', value: result[4][i - 1][9] }\r\n                            ];\r\n                            const chart = new Chart({\r\n                                container: `c${i}`,\r\n                                autoFit: true,\r\n                                height: 100,\r\n                                width: 10\r\n                            });\r\n\r\n                            chart.data(data);\r\n\r\n                            chart.tooltip({\r\n                                showMarkers: false,\r\n                            });\r\n\r\n                            chart.interval().position('year*value');\r\n\r\n                            chart.interaction('element-active');\r\n\r\n                            chart.render();\r\n                        }\r\n                        //转化步长\r\n                        for (let i = 1; i <= 10; i++) {\r\n                            const data = [\r\n                                { year: '1', value: result[5][i - 1][0] },\r\n                                { year: '2', value: result[5][i - 1][1] },\r\n                                { year: '3', value: result[5][i - 1][2] },\r\n                                { year: '4', value: result[5][i - 1][3] },\r\n                                { year: '5', value: result[5][i - 1][4] },\r\n                                { year: '6', value: result[5][i - 1][5] },\r\n                                { year: '7', value: result[5][i - 1][6] },\r\n                                { year: '8', value: result[5][i - 1][7] },\r\n                                { year: '9', value: result[5][i - 1][8] },\r\n                                { year: '10', value: result[5][i - 1][9] }\r\n                            ];\r\n                            const chart = new Chart({\r\n                                container: `C${i}`,\r\n                                autoFit: true,\r\n                                height: 100,\r\n                            });\r\n\r\n                            chart.data(data);\r\n\r\n                            chart.tooltip({\r\n                                showMarkers: false,\r\n                            });\r\n\r\n                            chart.interval().position('year*value');\r\n\r\n                            chart.interaction('element-active');\r\n\r\n                            chart.render();\r\n                        }\r\n                    }\r\n                }\r\n                clearTimeout(timeout)\r\n            }, 0);\r\n            //     }\r\n            // }\r\n\r\n\r\n        })\r\n    }\r\n\r\n\r\n    componentDidUpdata() {\r\n    }\r\n\r\n    showColumn = () => {\r\n        return (\r\n            <>\r\n                <ColumnGroup title=\"待归因事件\">\r\n                    <Column title=\"触点事件\" dataIndex=\"touchEvents\" key=\"touchEvents\" />\r\n                </ColumnGroup>\r\n                <ColumnGroup title=\"点击规模\">\r\n                    <Column title=\"总点击数\" dataIndex=\"totalClicks\" key=\"totalClicks\" />\r\n                    <Column title=\"有效点击率\" dataIndex=\"clickRate\" key=\"clickRate\" />\r\n                </ColumnGroup>\r\n                <ColumnGroup title=\"转化分布\">\r\n                    <Column title=\"转化时长分布\" dataIndex=\"durationDistr\" key=\"durationDistr\" />\r\n                    <Column title=\"转化步长分布\" dataIndex=\"stepLengthDistr\" key=\"stepLengthDistr\" />\r\n                </ColumnGroup>\r\n                <ColumnGroup title=\"目标转化\">\r\n                    <Column title=\"实现价值\" dataIndex=\"valueRealization\" key=\"valueRealization\" />\r\n                    <Column title=\"贡献率\" dataIndex=\"contributionRate\" key=\"contributionRate\" />\r\n                </ColumnGroup>\r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n    render() {\r\n        let result = this.props.resultData\r\n        if (typeof (result) === 'string') {\r\n            result = eval(`(${result})`)\r\n        }\r\n        return (\r\n            <Fragment>\r\n                <Table\r\n                    bordered={true}\r\n                    dataSource={this.state.data}\r\n                    className='reasult'\r\n                    pagination={{\r\n                        position: ['bottomCenter'],\r\n                        pageSize: 10,\r\n                        // 只有一页是不显示分页按钮\r\n                        hideOnSinglePage: true,\r\n                        onChange: function (page) {\r\n                            let timeout = setTimeout(function () {\r\n                                if (result[0] !== '' && result[0] !== undefined && result !== '') {\r\n                                    if (result[0].length <= 10) {\r\n                                        //转化时长分布\r\n                                        for (let i = (page - 1) * 10 + 1; i <= result[0].length; i++) {\r\n                                            const data = [\r\n                                                { year: '1', value: result[4][i - 1][0] },\r\n                                                { year: '2', value: result[4][i - 1][1] },\r\n                                                { year: '3', value: result[4][i - 1][2] },\r\n                                                { year: '4', value: result[4][i - 1][3] },\r\n                                                { year: '5', value: result[4][i - 1][4] },\r\n                                                { year: '6', value: result[4][i - 1][5] },\r\n                                                { year: '7', value: result[4][i - 1][6] },\r\n                                                { year: '8', value: result[4][i - 1][7] },\r\n                                                { year: '9', value: result[4][i - 1][8] },\r\n                                                { year: '10', value: result[4][i - 1][9] }\r\n                                            ];\r\n                                            const chart = new Chart({\r\n                                                container: `c${i}`,\r\n                                                autoFit: true,\r\n                                                height: 100,\r\n                                            });\r\n\r\n                                            chart.data(data);\r\n\r\n                                            chart.tooltip({\r\n                                                showMarkers: false,\r\n                                            });\r\n\r\n                                            chart.interval().position('year*value');\r\n\r\n                                            chart.interaction('element-active');\r\n\r\n                                            chart.render();\r\n\r\n                                        }\r\n                                        //转化步长分布\r\n                                        for (let i = (page - 1) * 10 + 1; i <= result[0].length; i++) {\r\n                                            const data = [\r\n                                                { year: '1', value: result[5][i - 1][0] },\r\n                                                { year: '2', value: result[5][i - 1][1] },\r\n                                                { year: '3', value: result[5][i - 1][2] },\r\n                                                { year: '4', value: result[5][i - 1][3] },\r\n                                                { year: '5', value: result[5][i - 1][4] },\r\n                                                { year: '6', value: result[5][i - 1][5] },\r\n                                                { year: '7', value: result[5][i - 1][6] },\r\n                                                { year: '8', value: result[5][i - 1][7] },\r\n                                                { year: '9', value: result[5][i - 1][8] },\r\n                                                { year: '10', value: result[5][i - 1][9] }\r\n                                            ];\r\n                                            const chart = new Chart({\r\n                                                container: `C${i}`,\r\n                                                autoFit: true,\r\n                                                height: 100,\r\n                                            });\r\n\r\n                                            chart.data(data);\r\n\r\n                                            chart.tooltip({\r\n                                                showMarkers: false,\r\n                                            });\r\n\r\n                                            chart.interval().position('year*value');\r\n\r\n                                            chart.interaction('element-active');\r\n\r\n                                            chart.render();\r\n\r\n                                        }\r\n                                    } else if (result[0].length > 10) {\r\n                                        let theOther = result[0].length % 10\r\n                                        let pageTotalNumber = parseInt(result[0].length / 10)\r\n                                        if (page <= pageTotalNumber) {\r\n                                            //转化时长分布\r\n                                            for (let i = (page - 1) * 10 + 1; i <= page * 10; i++) {\r\n                                                const data = [\r\n                                                    { year: '1', value: result[4][i - 1][0] },\r\n                                                    { year: '2', value: result[4][i - 1][1] },\r\n                                                    { year: '3', value: result[4][i - 1][2] },\r\n                                                    { year: '4', value: result[4][i - 1][3] },\r\n                                                    { year: '5', value: result[4][i - 1][4] },\r\n                                                    { year: '6', value: result[4][i - 1][5] },\r\n                                                    { year: '7', value: result[4][i - 1][6] },\r\n                                                    { year: '8', value: result[4][i - 1][7] },\r\n                                                    { year: '9', value: result[4][i - 1][8] },\r\n                                                    { year: '10', value: result[4][i - 1][9] }\r\n                                                ];\r\n                                                const chart = new Chart({\r\n                                                    container: `c${i}`,\r\n                                                    autoFit: true,\r\n                                                    height: 100,\r\n                                                });\r\n\r\n                                                chart.data(data);\r\n\r\n                                                chart.tooltip({\r\n                                                    showMarkers: false,\r\n                                                });\r\n\r\n                                                chart.interval().position('year*value');\r\n\r\n                                                chart.interaction('element-active');\r\n\r\n                                                chart.render();\r\n\r\n                                            }\r\n                                            //转化步长分布\r\n                                            for (let i = (page - 1) * 10 + 1; i <= page * 10; i++) {\r\n                                                const data = [\r\n                                                    { year: '1', value: result[5][i - 1][0] },\r\n                                                    { year: '2', value: result[5][i - 1][1] },\r\n                                                    { year: '3', value: result[5][i - 1][2] },\r\n                                                    { year: '4', value: result[5][i - 1][3] },\r\n                                                    { year: '5', value: result[5][i - 1][4] },\r\n                                                    { year: '6', value: result[5][i - 1][5] },\r\n                                                    { year: '7', value: result[5][i - 1][6] },\r\n                                                    { year: '8', value: result[5][i - 1][7] },\r\n                                                    { year: '9', value: result[5][i - 1][8] },\r\n                                                    { year: '10', value: result[5][i - 1][9] }\r\n                                                ];\r\n                                                const chart = new Chart({\r\n                                                    container: `C${i}`,\r\n                                                    autoFit: true,\r\n                                                    height: 100,\r\n                                                });\r\n\r\n                                                chart.data(data);\r\n\r\n                                                chart.tooltip({\r\n                                                    showMarkers: false,\r\n                                                });\r\n\r\n                                                chart.interval().position('year*value');\r\n\r\n                                                chart.interaction('element-active');\r\n\r\n                                                chart.render();\r\n\r\n                                            }\r\n                                        } else if (page === pageTotalNumber + 1) {\r\n                                            //转化时长分布\r\n                                            for (let i = (page - 1) * 10 + 1; i <= (page - 1) * 10 + theOther; i++) {\r\n                                                const data = [\r\n                                                    { year: '1', value: result[4][i - 1][0] },\r\n                                                    { year: '2', value: result[4][i - 1][1] },\r\n                                                    { year: '3', value: result[4][i - 1][2] },\r\n                                                    { year: '4', value: result[4][i - 1][3] },\r\n                                                    { year: '5', value: result[4][i - 1][4] },\r\n                                                    { year: '6', value: result[4][i - 1][5] },\r\n                                                    { year: '7', value: result[4][i - 1][6] },\r\n                                                    { year: '8', value: result[4][i - 1][7] },\r\n                                                    { year: '9', value: result[4][i - 1][8] },\r\n                                                    { year: '10', value: result[4][i - 1][9] }\r\n                                                ];\r\n                                                const chart = new Chart({\r\n                                                    container: `c${i}`,\r\n                                                    autoFit: true,\r\n                                                    height: 100,\r\n                                                });\r\n\r\n                                                chart.data(data);\r\n\r\n                                                chart.tooltip({\r\n                                                    showMarkers: false,\r\n                                                });\r\n\r\n                                                chart.interval().position('year*value');\r\n\r\n                                                chart.interaction('element-active');\r\n\r\n                                                chart.render();\r\n\r\n                                            }\r\n                                            //转化步长分布\r\n                                            for (let i = (page - 1) * 10 + 1; i <= (page - 1) * 10 + theOther; i++) {\r\n                                                const data = [\r\n                                                    { year: '1', value: result[5][i - 1][0] },\r\n                                                    { year: '2', value: result[5][i - 1][1] },\r\n                                                    { year: '3', value: result[5][i - 1][2] },\r\n                                                    { year: '4', value: result[5][i - 1][3] },\r\n                                                    { year: '5', value: result[5][i - 1][4] },\r\n                                                    { year: '6', value: result[5][i - 1][5] },\r\n                                                    { year: '7', value: result[5][i - 1][6] },\r\n                                                    { year: '8', value: result[5][i - 1][7] },\r\n                                                    { year: '9', value: result[5][i - 1][8] },\r\n                                                    { year: '10', value: result[5][i - 1][9] }\r\n                                                ];\r\n                                                const chart = new Chart({\r\n                                                    container: `C${i}`,\r\n                                                    autoFit: true,\r\n                                                    height: 100,\r\n                                                });\r\n\r\n                                                chart.data(data);\r\n\r\n                                                chart.tooltip({\r\n                                                    showMarkers: false,\r\n                                                });\r\n\r\n                                                chart.interval().position('year*value');\r\n\r\n                                                chart.interaction('element-active');\r\n\r\n                                                chart.render();\r\n\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                                clearTimeout(timeout)\r\n                            }, 0)\r\n                        }\r\n\r\n                    }}\r\n                    scroll={{\r\n                        y: 290\r\n                    }}\r\n                    tableLayout='fixed'\r\n                    style={{ minWidth: 700 }}\r\n                >\r\n                    {this.showColumn()}\r\n                </Table>\r\n            </Fragment >\r\n        )\r\n    }\r\n}\r\n\r\nexport default ReasultShow;","D:\\code\\g-project\\src\\event.js",[],{"ruleId":"43","severity":1,"message":"44","line":225,"column":32,"nodeType":"45","messageId":"46","endLine":225,"endColumn":36},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"43","severity":1,"message":"44","line":39,"column":30,"nodeType":"45","messageId":"46","endLine":39,"endColumn":34},{"ruleId":"43","severity":1,"message":"44","line":73,"column":30,"nodeType":"45","messageId":"46","endLine":73,"endColumn":34},{"ruleId":"43","severity":1,"message":"44","line":249,"column":22,"nodeType":"45","messageId":"46","endLine":249,"endColumn":26},"no-eval","eval can be harmful.","CallExpression","unexpected","no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-global-assign","no-unsafe-negation"]