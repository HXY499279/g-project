{"ast":null,"code":"import { isArray } from '@antv/util';\n\nfunction isValueEmpty(value) {\n  if (value) {\n    return false;\n  }\n\n  return value === null || value === undefined || isNaN(value);\n}\n\nfunction isYNil(point) {\n  if (isArray(point)) {\n    // 特殊处理 area 的关键点数据，其关键点结构为 [{x: 0, y: 1}, {x: 0, y: 2}]\n    return isValueEmpty(point[1].y);\n  }\n\n  var value = point.y;\n  return isArray(value) ? isValueEmpty(value[0]) : isValueEmpty(value);\n}\n/**\n * @ignore\n * 分割数据，用于处理在一组点数据中，y 对应的数值存在 null/undefined/NaN 的情况\n * 应用于折线图、区域图以及路径图\n *\n * ```typescript\n * // return [[{x: 1, y: 2}, {x: 3, y: 3}]]\n * getPathPoints([{x: 1, y: 2}, {x: 2, y: null}, {x: 3, y: 3}], true);\n * // return [[{x: 1, y: 2}], [{x: 3, y: 3}]]\n * getPathPoints([{x: 1, y: 2}, {x: 2, y: null}, {x: 3, y: 3}], false);\n * // return [[[{ x: 1, y: 10 }, { x: 2, y: 2 }], [{ x: 9, y: 34 }, { x: 1, y: 1 }]]]\n * getPathPoints([\n *   [{ x: 1, y: 10 }, { x: 2, y: 2 }],\n *   [{ x: 4, y: 2 }, { x: 8, y: NaN }],\n *   [{ x: 9, y: 34 }, { x: 1, y: 1 }],\n * ], true);\n * ```\n *\n * @param points 要进行处理点集合\n * @param connectNulls 是否连接空值数据\n * @param showSinglePoint 是否展示孤立点\n * @returns 返回处理后的点集合\n */\n\n\nexport function getPathPoints(points, connectNulls, showSinglePoint) {\n  if (connectNulls === void 0) {\n    connectNulls = false;\n  }\n\n  if (showSinglePoint === void 0) {\n    showSinglePoint = true;\n  }\n\n  if (!points.length || points.length === 1 && !showSinglePoint) {\n    // 空或者只有一个点并配置不展示时\n    return [];\n  }\n\n  if (connectNulls) {\n    // 即 y 值为空的场景\n    var filtered = [];\n\n    for (var i = 0, len = points.length; i < len; i++) {\n      var point = points[i];\n\n      if (!isYNil(point)) {\n        filtered.push(point);\n      }\n    }\n\n    return [filtered];\n  }\n\n  var result = [];\n  var tmp = [];\n\n  for (var i = 0, len = points.length; i < len; i++) {\n    var point = points[i];\n\n    if (isYNil(point)) {\n      if (tmp.length) {\n        if (!(tmp.length === 1 && !showSinglePoint)) {\n          // 如果前段数据只有一个字段并且不需要展示时则不加入\n          result.push(tmp);\n        }\n\n        tmp = [];\n      }\n    } else {\n      tmp.push(point);\n    }\n  }\n\n  if (tmp.length) {\n    result.push(tmp);\n  }\n\n  return result;\n}","map":{"version":3,"sources":["../../../../src/geometry/shape/util/get-path-points.ts"],"names":[],"mappings":"AAAA,SAAS,OAAT,QAAwB,YAAxB;;AAGA,SAAS,YAAT,CAAsB,KAAtB,EAA2B;AACzB,MAAI,KAAJ,EAAW;AACT,WAAO,KAAP;AACD;;AACD,SAAO,KAAK,KAAK,IAAV,IAAkB,KAAK,KAAK,SAA5B,IAAyC,KAAK,CAAC,KAAD,CAArD;AACD;;AAED,SAAS,MAAT,CAAgB,KAAhB,EAA2C;AACzC,MAAI,OAAO,CAAC,KAAD,CAAX,EAAoB;AAClB;AACA,WAAO,YAAY,CAAC,KAAK,CAAC,CAAD,CAAL,CAAS,CAAV,CAAnB;AACD;;AACD,MAAM,KAAK,GAAG,KAAK,CAAC,CAApB;AACA,SAAO,OAAO,CAAC,KAAD,CAAP,GAAiB,YAAY,CAAC,KAAK,CAAC,CAAD,CAAN,CAA7B,GAA0C,YAAY,CAAC,KAAD,CAA7D;AACD;AAED;;;;;;;;;;;;;;;;;;;;;;AAsBG;;;AACH,OAAM,SAAU,aAAV,CAAwB,MAAxB,EAA+C,YAA/C,EAA8E,eAA9E,EAA6G;AAA9D,MAAA,YAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,YAAA,GAAA,KAAA;AAA6B;;AAAE,MAAA,eAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,eAAA,GAAA,IAAA;AAA+B;;AACjH,MAAI,CAAC,MAAM,CAAC,MAAR,IAAmB,MAAM,CAAC,MAAP,KAAkB,CAAlB,IAAuB,CAAC,eAA/C,EAAiE;AAC/D;AACA,WAAO,EAAP;AACD;;AAED,MAAI,YAAJ,EAAkB;AAChB;AACA,QAAM,QAAQ,GAAG,EAAjB;;AACA,SAAK,IAAI,CAAC,GAAG,CAAR,EAAW,GAAG,GAAG,MAAM,CAAC,MAA7B,EAAqC,CAAC,GAAG,GAAzC,EAA8C,CAAC,EAA/C,EAAmD;AACjD,UAAM,KAAK,GAAG,MAAM,CAAC,CAAD,CAApB;;AACA,UAAI,CAAC,MAAM,CAAC,KAAD,CAAX,EAAoB;AAClB,QAAA,QAAQ,CAAC,IAAT,CAAc,KAAd;AACD;AACF;;AACD,WAAO,CAAC,QAAD,CAAP;AACD;;AAED,MAAM,MAAM,GAAG,EAAf;AACA,MAAI,GAAG,GAAG,EAAV;;AACA,OAAK,IAAI,CAAC,GAAG,CAAR,EAAW,GAAG,GAAG,MAAM,CAAC,MAA7B,EAAqC,CAAC,GAAG,GAAzC,EAA8C,CAAC,EAA/C,EAAmD;AACjD,QAAM,KAAK,GAAG,MAAM,CAAC,CAAD,CAApB;;AACA,QAAI,MAAM,CAAC,KAAD,CAAV,EAAmB;AACjB,UAAI,GAAG,CAAC,MAAR,EAAgB;AACd,YAAI,EAAE,GAAG,CAAC,MAAJ,KAAe,CAAf,IAAoB,CAAC,eAAvB,CAAJ,EAA6C;AAC3C;AACA,UAAA,MAAM,CAAC,IAAP,CAAY,GAAZ;AACD;;AACD,QAAA,GAAG,GAAG,EAAN;AACD;AACF,KARD,MAQO;AACL,MAAA,GAAG,CAAC,IAAJ,CAAS,KAAT;AACD;AACF;;AAED,MAAI,GAAG,CAAC,MAAR,EAAgB;AACd,IAAA,MAAM,CAAC,IAAP,CAAY,GAAZ;AACD;;AACD,SAAO,MAAP;AACD","sourcesContent":["import { isArray } from '@antv/util';\nimport { Point, RangePoint, ShapeVertices } from '../../../interface';\n\nfunction isValueEmpty(value) {\n  if (value) {\n    return false;\n  }\n  return value === null || value === undefined || isNaN(value);\n}\n\nfunction isYNil(point: Point[] | RangePoint) {\n  if (isArray(point)) {\n    // 特殊处理 area 的关键点数据，其关键点结构为 [{x: 0, y: 1}, {x: 0, y: 2}]\n    return isValueEmpty(point[1].y);\n  }\n  const value = point.y;\n  return isArray(value) ? isValueEmpty(value[0]) : isValueEmpty(value);\n}\n\n/**\n * @ignore\n * 分割数据，用于处理在一组点数据中，y 对应的数值存在 null/undefined/NaN 的情况\n * 应用于折线图、区域图以及路径图\n *\n * ```typescript\n * // return [[{x: 1, y: 2}, {x: 3, y: 3}]]\n * getPathPoints([{x: 1, y: 2}, {x: 2, y: null}, {x: 3, y: 3}], true);\n * // return [[{x: 1, y: 2}], [{x: 3, y: 3}]]\n * getPathPoints([{x: 1, y: 2}, {x: 2, y: null}, {x: 3, y: 3}], false);\n * // return [[[{ x: 1, y: 10 }, { x: 2, y: 2 }], [{ x: 9, y: 34 }, { x: 1, y: 1 }]]]\n * getPathPoints([\n *   [{ x: 1, y: 10 }, { x: 2, y: 2 }],\n *   [{ x: 4, y: 2 }, { x: 8, y: NaN }],\n *   [{ x: 9, y: 34 }, { x: 1, y: 1 }],\n * ], true);\n * ```\n *\n * @param points 要进行处理点集合\n * @param connectNulls 是否连接空值数据\n * @param showSinglePoint 是否展示孤立点\n * @returns 返回处理后的点集合\n */\nexport function getPathPoints(points: ShapeVertices, connectNulls: boolean = false, showSinglePoint: boolean = true) {\n  if (!points.length || (points.length === 1 && !showSinglePoint)) {\n    // 空或者只有一个点并配置不展示时\n    return [];\n  }\n\n  if (connectNulls) {\n    // 即 y 值为空的场景\n    const filtered = [];\n    for (let i = 0, len = points.length; i < len; i++) {\n      const point = points[i];\n      if (!isYNil(point)) {\n        filtered.push(point);\n      }\n    }\n    return [filtered];\n  }\n\n  const result = [];\n  let tmp = [];\n  for (let i = 0, len = points.length; i < len; i++) {\n    const point = points[i];\n    if (isYNil(point)) {\n      if (tmp.length) {\n        if (!(tmp.length === 1 && !showSinglePoint)) {\n          // 如果前段数据只有一个字段并且不需要展示时则不加入\n          result.push(tmp);\n        }\n        tmp = [];\n      }\n    } else {\n      tmp.push(point);\n    }\n  }\n\n  if (tmp.length) {\n    result.push(tmp);\n  }\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}